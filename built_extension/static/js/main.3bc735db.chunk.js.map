{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["TextArea","Input","socket","undefined","requestsHistoryKey","App","useState","connectionStatus","setConnectionStatus","ip","setIp","emitName","setEmitName","title","setTitle","request","setRequest","response","setResponse","loading","setLoading","requestsHistory","setRequestsHistory","useEffect","rqhry","localStorage","getItem","JSON","parse","onConnectClick","a","io","on","connect","disconnect","close","sendRequest","requestJson","str","e","isJson","emit","saveRequest","arr","push","key","nanoid","setItem","stringify","data","className","gutter","style","width","xs","sm","md","lg","xl","disabled","placeholder","size","value","onChange","target","onKeyPress","justify","span","onClick","type","length","CheckOutlined","ApiOutlined","LoadingOutlined","height","bordered","src","itemLayout","dataSource","slice","reverse","renderItem","item","Item","actions","requestKey","find","openRequest","color","filter","removeRequest","Meta","avatar","SwapOutlined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3bc735db.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { List, Input, Button, Row, Col } from \"antd\";\nconst { TextArea } = Input;\nimport {\n  SwapOutlined,\n  ApiOutlined,\n  CheckOutlined,\n  LoadingOutlined,\n} from \"@ant-design/icons\";\nimport ReactJson from \"react-json-view\";\nimport { io, Socket } from \"socket.io-client\";\nimport { nanoid } from \"nanoid\";\n\nlet socket: Socket | undefined = undefined;\nconst requestsHistoryKey = \"requestsHistory\";\ntype RequestHistory = {\n  key: string;\n  emitName: string;\n  title: string;\n  request: any;\n  response: any;\n}[];\nfunction isJson(str: string) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\nfunction App() {\n  const [connectionStatus, setConnectionStatus] = useState<\n    \"connected\" | \"disconnected\" | \"connecting\"\n  >(\"disconnected\");\n  const [ip, setIp] = useState<string>(\"\");\n  const [emitName, setEmitName] = useState<string>(\"\");\n  const [title, setTitle] = useState<string>(\"\");\n  const [request, setRequest] = useState<string>(\"\");\n  const [response, setResponse] = useState<Record<string, any>>({});\n  const [loading, setLoading] = useState<boolean>(false);\n  const [requestsHistory, setRequestsHistory] = useState<RequestHistory>([]);\n\n  useEffect(() => {\n    const rqhry = localStorage.getItem(requestsHistoryKey);\n    const ip = localStorage.getItem(\"ip\");\n    const emitName = localStorage.getItem(\"emitName\");\n    if (ip) setIp(ip);\n    if (emitName) setEmitName(emitName);\n    if (rqhry) setRequestsHistory(JSON.parse(rqhry));\n  }, []);\n\n  const onConnectClick = async () => {\n    setConnectionStatus(\"connecting\");\n    socket = io(ip);\n    socket.on(\"connect\", () => {\n      setConnectionStatus(\"connected\");\n    });\n    socket.on(\"disconnect\", () => {\n      setConnectionStatus(\"disconnected\");\n    });\n    if (connectionStatus === \"disconnected\") socket.connect();\n    else if (connectionStatus === \"connected\") {\n      socket.disconnect();\n      socket.close();\n      socket = undefined;\n      setConnectionStatus(\"disconnected\");\n    } else {\n      socket.disconnect();\n      socket.close();\n      socket = undefined;\n      setConnectionStatus(\"disconnected\");\n    }\n  };\n\n  const onInputChange = (e: any) => {\n    setIp(e.target.value);\n    localStorage.setItem(\"ip\", e.target.value);\n  };\n  const onEmitNameChange = (e: any) => {\n    setEmitName(e.target.value);\n    localStorage.setItem(\"emitName\", e.target.value);\n  };\n  const onTitleChange = (e: any) => {\n    setTitle(e.target.value);\n    localStorage.setItem(\"title\", e.target.value);\n  };\n\n  const onKeyPress = (e: any) => {\n    if (e.key !== \"Enter\") return;\n    onConnectClick();\n  };\n  const onRequestInputChange = (e: any) => {\n    setRequest(e.target.value);\n  };\n  const onRequestKeyPress = (e: any) => {\n    if (e.key !== \"Enter\") return;\n    sendRequest();\n  };\n\n  const sendRequest = () => {\n    setLoading(true);\n    if (!socket) {\n      return;\n    }\n    const requestJson = isJson(request) ? JSON.parse(request) : request;\n    socket.emit(emitName, requestJson, (response: any) => {\n      setLoading(false);\n      saveRequest(request, response, emitName);\n      setResponse(response);\n    });\n  };\n\n  const saveRequest = (request: any, response: any, emitName: string) => {\n    const requestsHistory = localStorage.getItem(requestsHistoryKey);\n    if (requestsHistory) {\n      const arr: any[] = JSON.parse(requestsHistory);\n      arr.push({ key: nanoid(3), emitName, title, request, response });\n      localStorage.setItem(requestsHistoryKey, JSON.stringify(arr));\n      setRequestsHistory(arr);\n    } else {\n      const data = [{ key: nanoid(3), emitName, title, request, response }];\n      localStorage.setItem(requestsHistoryKey, JSON.stringify(data));\n      setRequestsHistory(data);\n    }\n  };\n\n  const removeRequest = (requestKey: string) => {\n    const requestsHistory: string | null =\n      localStorage.getItem(requestsHistoryKey);\n    let arr: RequestHistory = requestsHistory && JSON.parse(requestsHistory);\n    arr = arr.filter((item) => item.key !== requestKey);\n    localStorage.setItem(requestsHistoryKey, JSON.stringify(arr));\n    setRequestsHistory(arr);\n  };\n\n  const cancelRequest = () => {\n    setLoading(false);\n  };\n  const openRequest = (requestKey: string) => {\n    const target = requestsHistory.find((item) => item.key === requestKey);\n\n    target && setRequest(target.request);\n    target && setResponse(target.response);\n    target && setEmitName(target.emitName);\n    target && setTitle(target.title);\n  };\n\n  return (\n    <div className=\"grid-container\">\n      <div className=\"top-panel\">\n        <Row gutter={[8, 8]} style={{ width: \"100%\" }}>\n          <Col xs={24} sm={24} md={8} lg={8} xl={8}>\n            <Input\n              disabled={connectionStatus === \"connected\"}\n              placeholder=\"Socketio address: example: http://localhost:8000\"\n              size=\"large\"\n              value={ip}\n              onChange={onInputChange}\n              onKeyPress={onKeyPress}\n            />\n          </Col>\n          <Col xs={24} sm={24} md={8} lg={8} xl={8}>\n            <Input\n              placeholder=\"Emit Name\"\n              size=\"large\"\n              value={emitName}\n              onChange={onEmitNameChange}\n            />\n          </Col>\n          <Col xs={24} sm={24} md={8} lg={8} xl={8}>\n            <Row gutter={8} justify=\"space-between\">\n              <Col span=\"20\">\n                <Input\n                  placeholder=\"Title\"\n                  size=\"large\"\n                  value={title}\n                  onChange={onTitleChange}\n                />\n              </Col>\n              <Col>\n                <Button\n                  onClick={onConnectClick}\n                  type=\"default\"\n                  disabled={ip.length === 0}\n                  size=\"large\"\n                >\n                  {connectionStatus === \"connected\" ? <CheckOutlined /> : <></>}\n                  {connectionStatus === \"disconnected\" ? (\n                    <ApiOutlined />\n                  ) : (\n                    <></>\n                  )}\n                  {connectionStatus === \"connecting\" ? (\n                    <LoadingOutlined />\n                  ) : (\n                    <></>\n                  )}\n                </Button>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </div>\n      <div className=\"request\">\n        <TextArea\n          style={{ height: \"100%\" }}\n          placeholder=\"Requset Body\"\n          bordered={false}\n          value={request}\n          onChange={onRequestInputChange}\n          onKeyPress={onRequestKeyPress}\n        />\n        <Button\n          onClick={sendRequest}\n          disabled={emitName.length === 0 || connectionStatus !== \"connected\"}\n        >\n          {connectionStatus !== \"connected\" ? \"Disconnected\" : \"SEND\"}\n        </Button>\n        {loading ? <Button onClick={cancelRequest}>CANCEL</Button> : <></>}\n      </div>\n      <div className=\"response\">\n        {loading ? <LoadingOutlined /> : <ReactJson src={response} />}\n      </div>\n\n      <div className=\"list\">\n        <List\n          itemLayout=\"horizontal\"\n          dataSource={requestsHistory.slice().reverse()}\n          renderItem={(item) => (\n            <List.Item\n              actions={[\n                <a\n                  key=\"list-loadmore-edit\"\n                  onClick={() => {\n                    openRequest(item.key);\n                  }}\n                >\n                  Open\n                </a>,\n                <a\n                  key=\"list-loadmore-more\"\n                  style={{ color: \"red\" }}\n                  onClick={() => {\n                    removeRequest(item.key);\n                  }}\n                >\n                  Remove\n                </a>,\n              ]}\n            >\n              <List.Item.Meta\n                avatar={<SwapOutlined />}\n                title={<b>{item.title || item.key}</b>}\n              />\n            </List.Item>\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
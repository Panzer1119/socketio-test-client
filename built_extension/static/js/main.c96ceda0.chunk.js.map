{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["TextArea","Input","socket","undefined","requestsHistoryKey","App","useState","connectionStatus","setConnectionStatus","ip","setIp","emitName","setEmitName","title","setTitle","request","setRequest","response","setResponse","loading","setLoading","requestsHistory","setRequestsHistory","useEffect","rqhry","localStorage","getItem","JSON","parse","onConnectClick","a","io","on","connect","disconnect","close","saveRequest","arr","push","key","nanoid","setItem","stringify","data","className","target","rel","href","packageJson","repository","url","gutter","style","width","xs","sm","md","lg","xl","disabled","placeholder","size","value","onChange","e","onKeyPress","justify","span","onClick","type","length","CheckOutlined","ApiOutlined","LoadingOutlined","height","bordered","requestJson","str","isJson","emit","src","itemLayout","dataSource","slice","reverse","renderItem","item","Item","actions","requestKey","find","openRequest","color","filter","removeRequest","Meta","avatar","SwapOutlined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c96ceda0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { List, Input, Button, Row, Col } from \"antd\";\nconst { TextArea } = Input;\nimport {\n  SwapOutlined,\n  ApiOutlined,\n  CheckOutlined,\n  LoadingOutlined,\n} from \"@ant-design/icons\";\nimport ReactJson from \"react-json-view\";\nimport { io, Socket } from \"socket.io-client\";\nimport { nanoid } from \"nanoid\";\nimport packageJson from \"../package.json\";\n\nlet socket: Socket | undefined = undefined;\nconst requestsHistoryKey = \"requestsHistory\";\ntype RequestHistory = {\n  key: string;\n  emitName: string;\n  title: string;\n  request: any;\n  response: any;\n}[];\nfunction isJson(str: string) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\nfunction App() {\n  const [connectionStatus, setConnectionStatus] = useState<\n    \"connected\" | \"disconnected\" | \"connecting\"\n  >(\"disconnected\");\n  const [ip, setIp] = useState<string>(\"\");\n  const [emitName, setEmitName] = useState<string>(\"\");\n  const [title, setTitle] = useState<string>(\"\");\n  const [request, setRequest] = useState<string>(\"\");\n  const [response, setResponse] = useState<Record<string, any>>({});\n  const [loading, setLoading] = useState<boolean>(false);\n  const [requestsHistory, setRequestsHistory] = useState<RequestHistory>([]);\n\n  useEffect(() => {\n    const rqhry = localStorage.getItem(requestsHistoryKey);\n    const ip = localStorage.getItem(\"ip\");\n    const emitName = localStorage.getItem(\"emitName\");\n    if (ip) setIp(ip);\n    if (emitName) setEmitName(emitName);\n    if (rqhry) setRequestsHistory(JSON.parse(rqhry));\n  }, []);\n\n  const onConnectClick = async () => {\n    setConnectionStatus(\"connecting\");\n    socket = io(ip);\n    socket.on(\"connect\", () => {\n      setConnectionStatus(\"connected\");\n    });\n    socket.on(\"disconnect\", () => {\n      setConnectionStatus(\"disconnected\");\n    });\n    if (connectionStatus === \"disconnected\") socket.connect();\n    else if (connectionStatus === \"connected\") {\n      socket.disconnect();\n      socket.close();\n      socket = undefined;\n      setConnectionStatus(\"disconnected\");\n    } else {\n      socket.disconnect();\n      socket.close();\n      socket = undefined;\n      setConnectionStatus(\"disconnected\");\n    }\n  };\n\n  const onInputChange = (e: any) => {\n    setIp(e.target.value);\n    localStorage.setItem(\"ip\", e.target.value);\n  };\n  const onEmitNameChange = (e: any) => {\n    setEmitName(e.target.value);\n    localStorage.setItem(\"emitName\", e.target.value);\n  };\n  const onTitleChange = (e: any) => {\n    setTitle(e.target.value);\n    localStorage.setItem(\"title\", e.target.value);\n  };\n\n  const onKeyPress = (e: any) => {\n    if (e.key !== \"Enter\") return;\n    onConnectClick();\n  };\n  const onRequestInputChange = (e: any) => {\n    setRequest(e.target.value);\n  };\n  // const onRequestKeyPress = (e: any) => {\n  //   if (e.key !== \"Enter\") return;\n  //   sendRequest();\n  // };\n\n  const sendRequest = () => {\n    setLoading(true);\n    if (!socket) {\n      return;\n    }\n    const requestJson = isJson(request) ? JSON.parse(request) : request;\n    socket.emit(emitName, requestJson, (response: any) => {\n      setLoading(false);\n      saveRequest(request, response, emitName);\n      setResponse(response);\n    });\n  };\n\n  const saveRequest = (request: any, response: any, emitName: string) => {\n    const requestsHistory = localStorage.getItem(requestsHistoryKey);\n    if (requestsHistory) {\n      const arr: any[] = JSON.parse(requestsHistory);\n      arr.push({ key: nanoid(3), emitName, title, request, response });\n      localStorage.setItem(requestsHistoryKey, JSON.stringify(arr));\n      setRequestsHistory(arr);\n    } else {\n      const data = [{ key: nanoid(3), emitName, title, request, response }];\n      localStorage.setItem(requestsHistoryKey, JSON.stringify(data));\n      setRequestsHistory(data);\n    }\n  };\n\n  const removeRequest = (requestKey: string) => {\n    const requestsHistory: string | null =\n      localStorage.getItem(requestsHistoryKey);\n    let arr: RequestHistory = requestsHistory && JSON.parse(requestsHistory);\n    arr = arr.filter((item) => item.key !== requestKey);\n    localStorage.setItem(requestsHistoryKey, JSON.stringify(arr));\n    setRequestsHistory(arr);\n  };\n\n  const cancelRequest = () => {\n    setLoading(false);\n  };\n  const openRequest = (requestKey: string) => {\n    const target = requestsHistory.find((item) => item.key === requestKey);\n\n    target && setRequest(target.request);\n    target && setResponse(target.response);\n    target && setEmitName(target.emitName);\n    target && setTitle(target.title);\n  };\n\n  return (\n    <div className=\"grid-container\">\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href={packageJson.repository.url}\n      >\n        <div className=\"githubLink\">github &#x1F5D7;</div>\n      </a>\n      <div className=\"top-panel\">\n        <Row gutter={[8, 8]} style={{ width: \"100%\" }}>\n          <Col xs={24} sm={24} md={8} lg={8} xl={8}>\n            <Input\n              disabled={connectionStatus === \"connected\"}\n              placeholder=\"Socketio address: example: http://localhost:8000\"\n              size=\"large\"\n              value={ip}\n              onChange={onInputChange}\n              onKeyPress={onKeyPress}\n            />\n          </Col>\n          <Col xs={24} sm={24} md={8} lg={8} xl={8}>\n            <Input\n              placeholder=\"Emit Name\"\n              size=\"large\"\n              value={emitName}\n              onChange={onEmitNameChange}\n            />\n          </Col>\n          <Col xs={24} sm={24} md={8} lg={8} xl={8}>\n            <Row gutter={8} justify=\"space-between\">\n              <Col span=\"20\">\n                <Input\n                  placeholder=\"Title\"\n                  size=\"large\"\n                  value={title}\n                  onChange={onTitleChange}\n                />\n              </Col>\n              <Col span=\"4\">\n                <Button\n                  onClick={onConnectClick}\n                  type=\"default\"\n                  disabled={ip.length === 0}\n                  size=\"large\"\n                >\n                  {connectionStatus === \"connected\" ? <CheckOutlined /> : <></>}\n                  {connectionStatus === \"disconnected\" ? (\n                    <ApiOutlined />\n                  ) : (\n                    <></>\n                  )}\n                  {connectionStatus === \"connecting\" ? (\n                    <LoadingOutlined />\n                  ) : (\n                    <></>\n                  )}\n                </Button>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </div>\n      <div className=\"request\">\n        <TextArea\n          style={{ height: \"100%\" }}\n          placeholder=\"Requset Body\"\n          bordered={false}\n          value={request}\n          onChange={onRequestInputChange}\n        />\n        <Button\n          onClick={sendRequest}\n          disabled={emitName.length === 0 || connectionStatus !== \"connected\"}\n        >\n          {connectionStatus !== \"connected\" ? \"Disconnected\" : \"SEND\"}\n        </Button>\n        {loading ? <Button onClick={cancelRequest}>CANCEL</Button> : <></>}\n      </div>\n      <div className=\"response\">\n        {loading ? <LoadingOutlined /> : <ReactJson src={response} />}\n      </div>\n\n      <div className=\"list\">\n        <List\n          itemLayout=\"horizontal\"\n          dataSource={requestsHistory.slice().reverse()}\n          renderItem={(item) => (\n            <List.Item\n              actions={[\n                <a\n                  key=\"list-loadmore-edit\"\n                  onClick={() => {\n                    openRequest(item.key);\n                  }}\n                >\n                  Open\n                </a>,\n                <a\n                  key=\"list-loadmore-more\"\n                  style={{ color: \"red\" }}\n                  onClick={() => {\n                    removeRequest(item.key);\n                  }}\n                >\n                  Remove\n                </a>,\n              ]}\n            >\n              <List.Item.Meta\n                avatar={<SwapOutlined />}\n                title={<b>{item.title || item.key}</b>}\n              />\n            </List.Item>\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}